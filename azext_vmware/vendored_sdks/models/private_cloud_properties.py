# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class PrivateCloudProperties(Model):
    """PrivateCloudProperties.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provisioning_state: Possible values include: 'Succeeded', 'Failed',
     'Cancelled', 'Pending', 'Building', 'Updating'
    :vartype provisioning_state: str or
     ~vendored_sdks.models.PrivateCloudProvisioningState
    :param circuit:
    :type circuit: ~vendored_sdks.models.Circuit
    :param cluster:
    :type cluster: ~vendored_sdks.models.DefaultClusterProperties
    :ivar clusters:
    :vartype clusters: list[str]
    :ivar endpoints:
    :vartype endpoints: ~vendored_sdks.models.Endpoints
    :param internet: Possible values include: 'Enabled', 'Disabled'
    :type internet: str or ~vendored_sdks.models.InternetEnum
    :param identity_sources:
    :type identity_sources: list[~vendored_sdks.models.IdentitySource]
    :param network_block:
    :type network_block: str
    :ivar management_network:
    :vartype management_network: str
    :ivar provisioning_network:
    :vartype provisioning_network: str
    :ivar vmotion_network:
    :vartype vmotion_network: str
    :param vcenter_password: Optionally, set the vCenter admin password when
     the private cloud is created
    :type vcenter_password: str
    :param nsxt_password: Optionally, set the NSX-T Manager password when the
     private cloud is created
    :type nsxt_password: str
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'clusters': {'readonly': True},
        'endpoints': {'readonly': True},
        'management_network': {'readonly': True},
        'provisioning_network': {'readonly': True},
        'vmotion_network': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'circuit': {'key': 'circuit', 'type': 'Circuit'},
        'cluster': {'key': 'cluster', 'type': 'DefaultClusterProperties'},
        'clusters': {'key': 'clusters', 'type': '[str]'},
        'endpoints': {'key': 'endpoints', 'type': 'Endpoints'},
        'internet': {'key': 'internet', 'type': 'str'},
        'identity_sources': {'key': 'identitySources', 'type': '[IdentitySource]'},
        'network_block': {'key': 'networkBlock', 'type': 'str'},
        'management_network': {'key': 'managementNetwork', 'type': 'str'},
        'provisioning_network': {'key': 'provisioningNetwork', 'type': 'str'},
        'vmotion_network': {'key': 'vmotionNetwork', 'type': 'str'},
        'vcenter_password': {'key': 'vcenterPassword', 'type': 'str'},
        'nsxt_password': {'key': 'nsxtPassword', 'type': 'str'},
    }

    def __init__(self, **kwargs):
        super(PrivateCloudProperties, self).__init__(**kwargs)
        self.provisioning_state = None
        self.circuit = kwargs.get('circuit', None)
        self.cluster = kwargs.get('cluster', None)
        self.clusters = None
        self.endpoints = None
        self.internet = kwargs.get('internet', None)
        self.identity_sources = kwargs.get('identity_sources', None)
        self.network_block = kwargs.get('network_block', None)
        self.management_network = None
        self.provisioning_network = None
        self.vmotion_network = None
        self.vcenter_password = kwargs.get('vcenter_password', None)
        self.nsxt_password = kwargs.get('nsxt_password', None)
